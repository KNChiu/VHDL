library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.std_logic_unsigned.all;
-----------------------------------
Entity taxi	is
	port(		
				CK	:in	std_logic;
				X,Y	:in	std_logic;
				D	:buffer std_logic_vector(3 downto 0);
				KC0 :buffer std_logic;
				L	:buffer std_logic_vector(6 downto 0)
	);
	
end;
------------------------------------------------------------------
architecture ARCH of taxi is
signal	S	:integer range 1 to 2;
signal	YC	:integer range 1 to 2;
signal	TT	:integer range 0 to 1000;
signal	T	:integer range 0 to 9999;
signal	CCC:std_logic_vector(1 downto 0);
signal	C3,C2,C1,C0:integer range 0 to 9999;
signal	N	:integer range 1 to 81;
signal	NN	:integer range 1 to 81;
signal	a,b,c	:integer range 0 to 9;
signal	Q0,Q1,Q2,Q3	:integer range 0 to 9;
signal	CC	:integer range 1 to 5;
signal	CKS	:std_logic_vector(23 downto 0);
signal	CK1:std_logic;
signal	CK2:std_logic;
signal	LO	:integer range 0 to 9;

begin
process(CK)
begin
	
	KC0<='0';
	
	if rising_edge(CK)	then
		CKS<=CKS+1;
	end if;
	CK1<=CKS(15);
	CK2<=CKS(22);







	if rising_edge(CK)	then	
		case CC is 
			when 1 => CC<=2; a<=0; b<=0; c<=0; c0<=T;
			when 2 => if c0>=1000  then c0<=c0-1000; a<=a+1; else CC<=3;end if;
			when 3 => if c0>=100  then c0<=c0-100;  b<=b+1; else CC<=4;end if;
			when 4 => if c0>=10   then c0<=c0-10;   c<=c+1; else CC<=5;end if;
			when 5 => Q0<=c0; Q1<=c; Q2<=b; Q3<=a; CC<=1;
		end case;
	end if;	
	
	if rising_edge(CK1)	then
		case CCC is 
				when "00" =>	D<="1110"; CCC<="01"; LO<=Q0;
				when "01" =>	D<="1101"; CCC<="10"; LO<=Q1;
				when "10" => 	D<="1011"; CCC<="11"; LO<=Q2;
				when "11" =>    D<="0111"; CCC<="00"; LO<=Q3;
			end case;
	end if;
	
	case LO is
	   when 0 => L<="0000001";
	   when 1 => L<="1001111";
	   when 2 => L<="0010010";
	   when 3 => L<="0000110";
	   when 4 => L<="1001100";
	   when 5 => L<="0100100";
	   when 6 => L<="0100000";
	   when 7 => L<="0001101";
	   when 8 => L<="0000000";
	   when 9 => L<="0001100";
	end case;

		
	
end process;
end ARCH;	
	